-- @nsURI MM=http://www.eclipse.org/uml2/5.0.0/UML

module transformation;
create OUT : MM from IN : MM;

rule Model{
	from 
		m : MM!Model
	to 
		m_copy : MM!Model(
			name <- m.name,
			packagedElement <- m.packagedElement
		)
}

rule StateMachine {
  from
    sm : MM!StateMachine
  to
    sm_copy : MM!StateMachine (
      name <- sm.name,
      region <- sm.region
    )
}

rule Region {
  from
    r : MM!Region
  to
    r_copy : MM!Region (
      name <- r.name,
      subvertex <- r.subvertex -> select(e | 
      	e.oclIsTypeOf(MM!State) 
		or e.oclIsTypeOf(MM!Pseudostate) 
		or e.oclIsTypeOf(MM!FinalState)).asSet(OclUndefined),
      transition <- r.transition
    )
}

helper context MM!Region def: uniqueStates(states: Sequence(MM!State)): Sequence(MM!State) =
  states->iterate(s; result: Sequence(MM!State) = Sequence{} |
    if result->exists(r | r.name = s.name) then
      result
    else
      result->append(s)
    endif
  );

rule Pseudostate {
  from
    ps : MM!Pseudostate
  to
    ps_copy : MM!Pseudostate (
      name <- ps.name,
      kind <- ps.kind
    )
}

-- Kopiowanie tylko poprawnych przejsc (posiada entry i exit)
rule State {
  from
    s : MM!State (s.oclIsTypeOf(MM!State) and (not s.entry.oclIsUndefined()) and (not s.exit.oclIsUndefined()))
  to
    s_copy : MM!State (
      name <- s.name,
      entry <- s.entry,
      exit <- s.exit
    )
}



rule Final {
	from 
      s : MM!FinalState (s.oclIsTypeOf(MM!FinalState))
	to 
	  s_copy : MM!FinalState(
	  	name <- s.name	
	  )
}

rule OpaqueBehavior{
  from 
	b : MM!OpaqueBehavior
  to
  	b_copy : MM!OpaqueBehavior(
  	  name <- b.name
  	)
}

-- Kopiowanie tylko poprawnych przejsc (posiada source i target)
rule Transition {
  from
    t : MM!Transition ((not t.source.oclIsUndefined()) and (not t.target.oclIsUndefined()))
  to
    t_copy : MM!Transition (
      source <- t.source,
      target <- t.target,
      guard <- t.guard
    )
}